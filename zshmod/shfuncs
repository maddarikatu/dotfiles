#!/bin/bash 

# shfuncs.
# Shell function dumpster (Source on shell's .rc).

CFG=$HOME/.zshrc
DOTFDIR=$HOME/code/git/dotfiles/zshmod/
VALS=$DOTFDIR/shaliases

aliasadd() {
	if [[ ! $1 == '' ]]; then
		name=$1
	else
		printf "Alias name: "
		read name
	fi

	printf "Alias function: "
	read func
	printf "(Optional) Functional description: "
	read desc
	
	if [[ ! $desc == '' ]]; then
		printf "\n# %s\nalias %s=\"%s\"\n" "$desc" "$name" "$func" >> $VALS
		return 0
	else
		printf "\nalias %s=\"%s\"\n" "$name" "$func" >> $VALS
		return 0
	fi

	source $CFG
} # Add an alias

aliasdel() {
	if [[ ! $1 == '' ]]; then
		ALIAS=$1
	else
		read -p "Alias to delete: " ALIAS
	fi

	DELETE=$(grep -B1 $ALIAS $VALS)
	AVALIBLE=$(grep "alias " $VALS | awk '{print $2}' | cut -f1 -d"=")

	if [[ ! $(echo "$AVALIBLE" | grep -w "$ALIAS") ]]; then
		echo "$ALIAS is not a listed alias."
		return 1
	fi

	printf "The following lines will be deleted:\n\n%s\n" "$DELETE"
	read -p "Confirm removal (type 'yes') " CONFIRM
	if [[ $CONFIRM == 'yes' ]]; then
		sed "s/$DELETE//" $VALS
	fi
	return 0

	source $CFG
} # Delete an alias

__wtar_save() {
	LINK=$1
	TAR=$(sed 's/.*\///' <<<$LINK)
	
	curl -O $LINK && tar -axpvf $TAR

	DIR=$(tar -tf $TAR | head -n 1)
	mv $TAR $DIR
	cd $DIR
	return 0
}

__wtar_not_save() {
	curl -s $1 | tar axpv
}

wtar() {
	case $1 in
		"-s" ) __wtar_save "$@" ;;
		*) __wtar_not_save "$@" ;;
	esac
} # download and extract tar files from the internet

acst() {
	ID=$1
	if [[ ! $ID == "acestream://*" ]]; then
		ID="acestream://$ID"
	fi
	exec acestream-launcher --player mpv $ID
	return 0
} # Open acestream from IDs instead of typing the whole thing

scr() {
	FILE=$1
	if [[ $2 == 'sh' ]]; then
		printf "#!/bin/sh\n\n" > $FILE
		chmod +x $FILE
		$EDITOR $FILE && return 0
	elif [ $# == 1 ]; then
		case $(sed 's/.*\.//' <<<$1) in
			'py' ) INTERPRETER=python ;;
			'lua' ) INTERPRETER=lua ;;
			''|'bash' ) INTERPRETER=bash ;;
			'pl' ) INTERPRETER=perl ;;
		esac
	else
		INTERPRETER=$2
	fi
	cat << EOF > $FILE
#!/usr/bin/env $INTERPRETER


EOF
	chmod +x $FILE
	$EDITOR $FILE
	return 0
} # create a bash script with a shebag, make it executable and open with the editor

nd() {
	NAME=$1
	mkdir $NAME
	cd $NAME
	return 0
}

tarless() {
	tar atf $1 | less
}

ipcow() {
	printf "%i.%i.%i.%i\n" `shuf -n4 -i0-255` | /usr/games/cowsay $@
}

ghcl() {
	git clone https://github.com/$@
}

ghclr() {
	git clone --recursive https://github.com/$@
}

tcpl() {
	clang "$1" -o $(sed 's/\.c/\.elf/' <<<$1)
} # helper through The C Programming Language to compile the code (it's on a git repo and *.elf is in .gitignore)

colors() {
	T='gYw'   # The test text

	echo -e "\n                 40m     41m     42m     43m\
     44m     45m     46m     47m";

	for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
		   '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
		   '  36m' '1;36m' '  37m' '1;37m';
	  do FG=${FGs// /}
	  echo -en " $FGs \033[$FG  $T  "
	  for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
	    do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
	  done
	  echo;
	done
	echo
} # https://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html

sqrt() {
	sc=$([ -z $2 ] && echo 5 || echo "$2")
	echo "scale=$sc; sqrt($1)" | bc
}

twinkcel() {
	cd $HOME/code/proj/twinkcel
	codium .
	python -m http.server --bind 127.0.0.1 9000
}

rmd() {
    # Prompt the user for confirmation
    echo -n "Â¿Elimitar $@? [y/N]: "
    read -r confirm

    # Check if the user confirmed with 'y' or 'Y'
    if [[ $confirm == [yY] ]]; then
        # Execute the 'rm -fr' command
        rm -vfr "$@"
    else
        # Abort the operation
        echo "Nada borrado."
    fi
}
